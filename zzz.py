import os
import asyncio
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import requests
from bs4 import BeautifulSoup

API_TOKEN = '7773785455:AAGvA88X-acyRRzN0QimGQAieSKrX7nDpTk'
ADMIN_IDS = [7699241002, 1110784441]  # ID –∞–¥–º–∏–Ω–æ–≤ –±–æ—Ç–∞
NOTIFY_CHAT_ID = -4664465936  # ID –≥—Ä—É–ø–ø—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    async with aiosqlite.connect('streamers.db') as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS streamers (
                username TEXT PRIMARY KEY,
                phone TEXT,
                description TEXT,
                is_active INTEGER DEFAULT 1
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS notifications (
                username TEXT,
                chat_id INTEGER,
                message_id INTEGER,
                PRIMARY KEY (username, chat_id, message_id)
            )
        ''')
        # New table for chat admins
        await db.execute('''
            CREATE TABLE IF NOT EXISTS chat_admins (
                chat_id INTEGER,
                admin_id INTEGER,
                PRIMARY KEY (chat_id, admin_id)
            )
        ''')
        await db.commit()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∏–º–∞
def get_tiktok_live(username):
    url = f"https://www.tiktok.com/@{username}/live"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"}

    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
    except:
        return False

    soup = BeautifulSoup(response.text, "html.parser")
    return bool(soup.find("script", id="VideoObject"))


# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∏–º–µ—Ä–∞
class AddStreamer(StatesGroup):
    waiting_for_data = State()


# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'], chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def cmd_start(message: types.Message):
    help_text = """TTLiveDAR - Tik Tok Live Detection and Ranging

–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö:
- –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ ""
/list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ (—Å [+] –∞–∫—Ç–∏–≤–Ω—ã–µ, [-] –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ)
/view [username] - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —Å—Ç—Ä–∏–º–µ—Ä–µ

–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:
/add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Å—Ç—Ä–∏–º–µ—Ä–∞ 
   ‚Ä¢ –§–æ—Ä–º–∞—Ç: username, —Ç–µ–ª–µ—Ñ–æ–Ω, –æ–ø–∏—Å–∞–Ω–∏–µ
/rem [username] - —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∏–º–µ—Ä–∞
/offon [username] - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç—Ä–∏–º–µ—Ä–∞
/alloffon - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏:
/admin [user_id] - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞ 
/admin_rem [user_id] - —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞
/admin_list - —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞

–ü—Ä–∏–º–µ—Ä—ã:
- /add 
   Bobovka
   79991234567
   –ë–æ–±–æ–≤–∫–∞ –±–µ—à–∞—Å—Ç—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è
- /rem Bobovka
- /offon Bobovka
- /view Bobovka
- /admin 123456789
"""
    await message.answer(help_text)


# Admin command handlers –π–æ—É
@dp.message_handler(commands=['admin'], chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def add_admin(message: types.Message):
    # Only group admins can add new admins
    chat_member = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if chat_member.status not in ['creator', 'administrator']:
        return await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞.")

    # Get the chat_id to add as admin
    admin_id = message.get_args()
    if not admin_id:
        return await message.answer("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /admin {user_id}")

    try:
        admin_id = int(admin_id)
        async with aiosqlite.connect('streamers.db') as db:
            await db.execute('INSERT OR IGNORE INTO chat_admins (chat_id, admin_id) VALUES (?, ?)',
                             (message.chat.id, admin_id))
            await db.commit()
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}")


@dp.message_handler(commands=['admin_rem'], chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def remove_admin(message: types.Message):
    # Only group admins can remove admins
    chat_member = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if chat_member.status not in ['creator', 'administrator']:
        return await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞.")

    # Get the chat_id to remove from admins
    admin_id = message.get_args()
    if not admin_id:
        return await message.answer("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /admin_rem {user_id}")

    try:
        admin_id = int(admin_id)
        async with aiosqlite.connect('streamers.db') as db:
            await db.execute('DELETE FROM chat_admins WHERE chat_id = ? AND admin_id = ?',
                             (message.chat.id, admin_id))
            rows_affected = await db.total_changes()
            await db.commit()

        if rows_affected > 0:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        else:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}")


@dp.message_handler(commands=['admin_list'], chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def list_admins(message: types.Message):
    async with aiosqlite.connect('streamers.db') as db:
        cursor = await db.execute('SELECT admin_id FROM chat_admins WHERE chat_id = ?', (message.chat.id,))
        admins = await cursor.fetchall()

    if not admins:
        return await message.answer("–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞.")

    admin_list = [str(admin[0]) for admin in admins]
    text = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ:\n" + "\n".join(admin_list)
    await message.answer(text)


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞
def check_chat_admin(func):
    async def wrapper(message: types.Message):
        # Check if the user is a group administrator or in the chat admins list
        chat_member = await bot.get_chat_member(message.chat.id, message.from_user.id)
        if chat_member.status in ['creator', 'administrator']:
            return await func(message)

        async with aiosqlite.connect('streamers.db') as db:
            cursor = await db.execute('SELECT 1 FROM chat_admins WHERE chat_id = ? AND admin_id = ?',
                                      (message.chat.id, message.from_user.id))
            is_bot_admin = await cursor.fetchone()

        if is_bot_admin:
            return await func(message)

        await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    return wrapper


@dp.message_handler(commands=['view'], chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def cmd_view(message: types.Message):
    username = message.get_args()
    if not username:
        return await message.answer("–£–∫–∞–∂–∏—Ç–µ username: /view username")

    async with aiosqlite.connect('streamers.db') as db:
        cursor = await db.execute(
            'SELECT username, phone, description, is_active FROM streamers WHERE username = ?',
            (username,)
        )
        streamer = await cursor.fetchone()

    if not streamer:
        return await message.answer(f"–°—Ç—Ä–∏–º–µ—Ä {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")

    username, phone, desc, is_active = streamer
    status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if is_active == 1 else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"

    profile_text = (
        f"üìã –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—Ä–∏–º–µ—Ä–∞\n\n"
        f"üë§ Username: {username}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n"
        f"‚ö°Ô∏è –°—Ç–∞—Ç—É—Å: {status}\n\n"
        f"üîó –°—Å—ã–ª–∫–∏:\n"
        f"‚ñ´Ô∏è TikTok: https://www.tiktok.com/@{username}\n"
        f"‚ñ´Ô∏è WhatsApp: wa.me/{phone}\n"
        f"‚ñ´Ô∏è Telegram: t.me/{phone}\n"
        f"‚ñ´Ô∏è Viber: viber.click/{phone}"
    )

    await message.answer(profile_text)


# –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∏–º–µ—Ä–∞
@dp.message_handler(commands=['add'], chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
@check_chat_admin
async def cmd_add(message: types.Message):
    # Existing add command implementation remains the same
    await AddStreamer.waiting_for_data.set()
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–û–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º):\n"
                         "Username –≤ —Ç–∏–∫ —Ç–æ–∫–µ\n"
                         "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                         "–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
@dp.message_handler(state=AddStreamer.waiting_for_data, chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def process_add(message: types.Message, state: FSMContext):
    try:
        data = message.text.split('\n')
        username = data[0].strip()
        phone = data[1].strip()
        desc = data[2].strip()

        async with aiosqlite.connect('streamers.db') as db:
            await db.execute('INSERT INTO streamers (username, phone, description) VALUES (?, ?, ?)',
                             (username, phone, desc))
            await db.commit()

        await message.answer("–°—Ç—Ä–∏–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.finish()


# –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–∏–º–µ—Ä–∞
@dp.message_handler(commands=['rem'], chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
@check_chat_admin
async def cmd_rem(message: types.Message):
    # Existing remove command implementation remains the same
    username = message.get_args()
    if not username:
        return await message.answer("–£–∫–∞–∂–∏—Ç–µ username: /rem username")

    async with aiosqlite.connect('streamers.db') as db:
        await db.execute('DELETE FROM streamers WHERE username = ?', (username,))
        await db.execute('DELETE FROM notifications WHERE username = ?', (username,))
        await db.commit()

    await message.answer(f"–°—Ç—Ä–∏–º–µ—Ä {username} —É–¥–∞–ª–µ–Ω")


@dp.message_handler(commands=['offon'], chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
@check_chat_admin
async def toggle_streamer_monitoring(message: types.Message):
    username = message.get_args()
    if not username:
        return await message.answer("–£–∫–∞–∂–∏—Ç–µ username: /offon {username}")

    async with aiosqlite.connect('streamers.db') as db:
        cursor = await db.execute('SELECT is_active FROM streamers WHERE username = ?', (username,))
        result = await cursor.fetchone()

        if not result:
            return await message.answer(f"–°—Ç—Ä–∏–º–µ—Ä {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")

        new_status = 1 if result[0] == 0 else 0
        await db.execute('UPDATE streamers SET is_active = ? WHERE username = ?', (new_status, username))
        await db.commit()

    status_text = "–≤–∫–ª—é—á–µ–Ω–∞" if new_status == 1 else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
    await message.answer(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∏–º–µ—Ä–∞ {username} {status_text}")


@dp.message_handler(commands=['alloffon'], chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
@check_chat_admin
async def toggle_all_streamers_monitoring(message: types.Message):
    async with aiosqlite.connect('streamers.db') as db:
        cursor = await db.execute('SELECT is_active FROM streamers LIMIT 1')
        result = await cursor.fetchone()

        if not result:
            return await message.answer("–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –ø—É—Å—Ç")

        current_status = result[0]
        new_status = 1 if current_status == 0 else 0
        await db.execute('UPDATE streamers SET is_active = ?', (new_status,))
        await db.commit()

    status_text = "–≤–∫–ª—é—á–µ–Ω–∞" if new_status == 1 else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
    await message.answer(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ {status_text}")


# –ö–æ–º–∞–Ω–¥–∞ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤
@dp.message_handler(commands=['list'], chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def cmd_list(message: types.Message):
    async with aiosqlite.connect('streamers.db') as db:
        cursor = await db.execute('SELECT username, is_active FROM streamers')
        streamers = await cursor.fetchall()

    if not streamers:
        return await message.answer("–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –ø—É—Å—Ç")

    text = "–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å—Ç—Ä–∏–º–µ—Ä—ã:\n" + "\n".join([
        f"[+] {s[0]}" if s[1] == 1 else f"[-] {s[0]}" for s in streamers
    ])
    await message.answer(text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–Ω–∏—á—Ç–æ–∂–µ–Ω–æ"
@dp.callback_query_handler(lambda c: c.data.startswith('viewed_'))
async def mark_viewed(callback: types.CallbackQuery):
    username = "_".join(callback.data.split("_")[1:])

    async with aiosqlite.connect('streamers.db') as db:
        await db.execute('UPDATE streamers SET is_active = 1 WHERE username = ?', (username,))
        cursor = await db.execute('SELECT chat_id, message_id FROM notifications WHERE username = ?', (username,))
        notifications = await cursor.fetchall()
        await db.execute('DELETE FROM notifications WHERE username = ?', (username,))
        await db.commit()

    for chat_id, message_id in notifications:
        try:
            new_markup = types.InlineKeyboardMarkup()
            new_markup.add(types.InlineKeyboardButton(
                "‚úÖ –≠—Ñ–∏—Ä –∑–∞–≤–µ—Ä—à—ë–Ω ‚úÖ",
                callback_data="already_pressed"
            ))
            await bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=new_markup
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")

    await callback.answer("–°—Ç—Ä–∏–º–µ—Ä –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(lambda c: c.data == 'already_pressed')
async def handle_already_pressed(callback: types.CallbackQuery):
    await callback.answer("–≠—Ç–æ—Ç —Å—Ç—Ä–∏–º–µ—Ä —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é!", show_alert=True)


async def auto_mark_viewed(username, chat_id, message_id):
    await asyncio.sleep(1200)  # 20 –º–∏–Ω—É—Ç = 1200 —Å–µ–∫—É–Ω–¥

    async with aiosqlite.connect('streamers.db') as db:
        cursor = await db.execute('SELECT * FROM notifications WHERE username = ? AND chat_id = ? AND message_id = ?',
                                  (username, chat_id, message_id))
        notification = await cursor.fetchone()

        if notification:
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã notifications
            await db.execute('DELETE FROM notifications WHERE username = ? AND chat_id = ? AND message_id = ?',
                             (username, chat_id, message_id))

            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ is_active –≤ —Ç–∞–±–ª–∏—Ü–µ streamers
            await db.execute('UPDATE streamers SET is_active = 1 WHERE username = ?', (username,))

            await db.commit()

            new_markup = types.InlineKeyboardMarkup()
            new_markup.add(types.InlineKeyboardButton(
                "–≠—Ñ–∏—Ä –∑–∞–≤–µ—Ä—à—ë–Ω üíØ",
                callback_data="already_pressed"
            ))
            await bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=new_markup
            )


async def check_streams():
    while True:
        async with aiosqlite.connect('streamers.db') as db:
            cursor = await db.execute('SELECT * FROM streamers WHERE is_active = 1')
            streamers = await cursor.fetchall()

        tasks = []
        for streamer in streamers:
            username, phone, desc, is_active = streamer
            tasks.append(check_single_streamer(username, phone, desc))

        await asyncio.gather(*tasks)
        await asyncio.sleep(10)


async def check_single_streamer(username, phone, desc):
    if get_tiktok_live(username):
        message_text = (
            f"‚ö†Ô∏è TTLiveDAR –û–±–Ω–∞—Ä—É–∂–∏–ª —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é! ‚ö†Ô∏è\n\n"
            f"{desc}\n\n"
            f"üßë‚Äçüíª: {username}\n"
            f"üîó: https://www.tiktok.com/@{username}/live\n\n"
            f"üìû: {phone}\n\n"
            f" üü© : wa.me/{phone}\n"
            f" üü¶ : t.me/{phone}\n"
            f" üü™ : viber.click/{phone}"
        )

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(
            "‚òëÔ∏è –≠—Ñ–∏—Ä –£–Ω–∏—á—Ç–æ–∂–µ–Ω ‚òëÔ∏è",
            callback_data=f"viewed_{username}"
        ))

        try:
            msg = await bot.send_message(NOTIFY_CHAT_ID, message_text, reply_markup=markup)
            async with aiosqlite.connect('streamers.db') as db:
                await db.execute(
                    'INSERT INTO notifications (username, chat_id, message_id) VALUES (?, ?, ?)',
                    (username, NOTIFY_CHAT_ID, msg.message_id)
                )
                await db.commit()

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç
            asyncio.create_task(auto_mark_viewed(username, NOTIFY_CHAT_ID, msg.message_id))

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        async with aiosqlite.connect('streamers.db') as db:
            await db.execute('UPDATE streamers SET is_active = 0 WHERE username = ?', (username,))
            await db.commit()


async def main():
    await init_db()
    asyncio.create_task(check_streams())
    await dp.start_polling()


if __name__ == '__main__':
    asyncio.run(main())